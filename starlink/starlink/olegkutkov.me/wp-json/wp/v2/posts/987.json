{"id":987,"date":"2019-11-08T03:39:34","date_gmt":"2019-11-08T00:39:34","guid":{"rendered":"http:\/\/olegkutkov.me\/?p=987"},"modified":"2021-02-06T23:12:25","modified_gmt":"2021-02-06T21:12:25","slug":"rs-485-practice-and-theory","status":"publish","type":"post","link":"https:\/\/olegkutkov.me\/2019\/11\/08\/rs-485-practice-and-theory\/","title":{"rendered":"RS-485 practice and theory"},"content":{"rendered":"<p><img loading=\"lazy\" decoding=\"async\" class=\"alignleft size-thumbnail wp-image-988\" src=\"http:\/\/olegkutkov.me\/wp-content\/uploads\/2019\/11\/rs485_adapters_test_avt-150x150.jpg\" alt=\"\" width=\"150\" height=\"150\" \/> I just built two RS-485 <a href=\"https:\/\/olegkutkov.me\/2018\/09\/18\/isolated-usb-to-rs485-adapter-version-2\/\">adapters<\/a> (version 2) and decided to write a little note about the RS-485 bus (and differential line) theory, plus perform some testing of the devices. This material mostly interesting for newbies.<\/p>\n<p>At the end of this article, you can find a funny way to test these devices \ud83d\ude42<\/p>\n<p><!--more--><\/p>\n<p>Present adapters are based on the USB to serial converter, which means that for the computer&#8217;s OS, these devices are just a serial interface. Every byte written to the interface is transferred and should be received on the other end of this &#8220;pipe&#8221;.<\/p>\n<p>Of course, RS-485 is nothing to deal with transmission protocols.<br \/>\nThis standard defines only an electrical differential line with a transmitter, receivers, line termination, etc. What is actually on the line is defined by the top-level application.<\/p>\n<p>Let&#8217;s do some experiments.<br \/>\nConnect the adapter to the Linux PC and run <code>dmesg<\/code> command to find the device&#8217;s file name. If everything is ok, there must be something like <em>\/dev\/ttyUSBX<\/em>, where <strong>X<\/strong> is a number of the device.<br \/>\nNow writing and reading can be performed on the device.<br \/>\nConnect the oscilloscope probe to the FT232 pin 1. This is TX. Now everything is ready to send some data and capture some bits. Of course, at this point, it&#8217;s not RS-485 but a simple <a href=\"https:\/\/en.wikipedia.org\/wiki\/Serial_communication\">serial line<\/a>.<\/p>\n<p><a href=\"http:\/\/olegkutkov.me\/wp-content\/uploads\/2019\/11\/ft232_tx_probe.png\"><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter wp-image-998 size-full\" src=\"http:\/\/olegkutkov.me\/wp-content\/uploads\/2019\/11\/ft232_tx_probe.png\" alt=\"\" width=\"622\" height=\"715\" srcset=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2019\/11\/ft232_tx_probe.png 622w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2019\/11\/ft232_tx_probe-261x300.png 261w\" sizes=\"(max-width: 622px) 100vw, 622px\" \/><\/a><\/p>\n<p>Execute the following command:<\/p>\n<pre>echo -n \"h\" &gt; \/dev\/ttyUSBX<\/pre>\n<p>Where X is your device number.<br \/>\nWith this command, we just sent to the device one symbol, &#8216;h&#8217;, which is byte 0x68, according to <a href=\"https:\/\/www.asciitable.com\/\">the ASCII table<\/a>.<br \/>\nArgument &#8216;-n&#8217; prevents echo from using &#8216;\\n&#8217; (newline) symbol after &#8216;h&#8217;.<\/p>\n<p>0x68 is <strong>00010110<\/strong> in binary, so such a pattern should be captured.<\/p>\n<p><a href=\"http:\/\/olegkutkov.me\/wp-content\/uploads\/2019\/11\/h_sym_with_measures.png\"><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter size-full wp-image-995\" src=\"http:\/\/olegkutkov.me\/wp-content\/uploads\/2019\/11\/h_sym_with_measures.png\" alt=\"\" width=\"649\" height=\"458\" srcset=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2019\/11\/h_sym_with_measures.png 649w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2019\/11\/h_sym_with_measures-300x212.png 300w\" sizes=\"(max-width: 649px) 100vw, 649px\" \/><\/a><\/p>\n<p>Here can be seen in data bits. Also, there are some additional bits in the beginning and the end of the sequence.<br \/>\nThese <a href=\"https:\/\/en.wikipedia.org\/wiki\/Asynchronous_serial_communication\"><strong>start<\/strong><\/a> and <a href=\"https:\/\/en.wikipedia.org\/wiki\/Asynchronous_serial_communication\"><strong>stop<\/strong><\/a> bits that can help to separate the actual data frame. There can be additional bits called &#8216;<a href=\"https:\/\/en.wikipedia.org\/wiki\/Parity_bit\"><strong>parity bits<\/strong><\/a>&#8216; and can be used as 2 stop bits.\u00a0 All this depends on the serial port configuration in the operating system.<\/p>\n<p>You may mention that values are inverted. An idle line always represents &#8216;bit&#8217; 1. This happens due to the resistor between the data line and the power line inside the FT232. It&#8217;s the default <span class=\"gt-card-ttl-txt\">behavior<\/span> for such data lines (but can be changed in FT232 EEPROM).<\/p>\n<p>Also can be measured the length of the one bit &#8211; 104 microseconds and measure total frequency, which is 9.6 kHz (1\/104 * 1000).<br \/>\nHmm, 9.6 kHz sounds familiar. Of course, it&#8217;s the speed of the line! Baud rate: 9600. This is a way of how an unknown baud rate can be found.<\/p>\n<p>Let&#8217;s check serial port settings to ensure that correct data was captured. Run the following command:<\/p>\n<pre>tty -F \/dev\/ttyUSBX -a<\/pre>\n<p>(don&#8217;t forget to replace &#8216;X&#8217; with your device number)<\/p>\n<p>In the output should be the following values:<\/p>\n<pre>speed 9600 baud\ncs8\n-cstopb\n-parenb\n<\/pre>\n<p>This means speed 9600, 8 data bits, 1 stop bit, no parity.<\/p>\n<p>Now we can do some measures on the RS-485 line. It&#8217;s a differential line that uses two wires. Both wires transfer the same signal, but one signal is positive, and the second is negative. Both signals are corresponding to each other.<br \/>\nThe receiver&#8217;s side device measures the voltage difference between the two wires. High enough (\u00b1200mV) difference interpreted as a single bit of the data. This allows excluding interference on the line because both wires are affected by interference in the same way. This interference is a not-differential signal, so it just subtracts from itself, giving almost zero value.<br \/>\nAdditional shielding allows using a very long and stable line (but low speed) up to 1.2 kilometers, which is great for industrial applications.<br \/>\nPlease note that it&#8217;s highly recommended to use common-ground wire in a long line, especially between different buildings. This can help to equalize ground voltages between devices and avoid problems that can ruin your day.<\/p>\n<p><a href=\"http:\/\/olegkutkov.me\/wp-content\/uploads\/2019\/11\/rs-485-line-example.png\"><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter size-large wp-image-1003\" src=\"http:\/\/olegkutkov.me\/wp-content\/uploads\/2019\/11\/rs-485-line-example-1024x278.png\" alt=\"\" width=\"708\" height=\"192\" srcset=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2019\/11\/rs-485-line-example-1024x278.png 1024w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2019\/11\/rs-485-line-example-300x81.png 300w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2019\/11\/rs-485-line-example-768x208.png 768w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2019\/11\/rs-485-line-example.png 1228w\" sizes=\"(max-width: 708px) 100vw, 708px\" \/><\/a><\/p>\n<p>Endpoints of the RS-485 line should be terminated with a resistor, which is equal to the cable&#8217;s resistance. For a typical CAT5 twisted-pair, this is 120 \u03a9.<br \/>\nYou can also see in my (and other) adapter additional resistors that pull up positive and pull down negative wires of the RS-485 line.<br \/>\nThese resistors form a voltage divider, which can set initial bias voltage on the receiver inputs. This can help to stabilize the line so the receiver can easily detect voltage changes during data transmission.<\/p>\n<p>The differential nature of the RS-485 means that we can&#8217;t directly connect our oscilloscope probes to the line. Actually, we can, but all measures will be not precise and sometimes incorrect.<\/p>\n<p>To capture differential line signals should be used differential probes, like this one:<\/p>\n<p><a href=\"https:\/\/www.eevblog.com\/forum\/testgear\/eevblog-hvp70-differential-probe\/\"><img loading=\"lazy\" decoding=\"async\" class=\"wp-image-1006 alignleft\" src=\"http:\/\/olegkutkov.me\/wp-content\/uploads\/2019\/11\/diff_probe_eevblog.jpg\" alt=\"\" width=\"400\" height=\"302\" srcset=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2019\/11\/diff_probe_eevblog.jpg 800w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2019\/11\/diff_probe_eevblog-300x227.jpg 300w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2019\/11\/diff_probe_eevblog-768x580.jpg 768w\" sizes=\"(max-width: 400px) 100vw, 400px\" \/><\/a><\/p>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<p>The differential probe can also be used to perform measures on the circuits connected to the generic AC voltage (like switching power supply) without destroying the oscilloscope and probe wires.<\/p>\n<p>I don&#8217;t have such a probe, so let&#8217;s do it incorrectly \ud83d\ude42<\/p>\n<p>Connect the first channel of the oscilloscope to the line A+ (pin next to the common wire) and the second channel to the line B-.<br \/>\nIn this situation, the probes&#8217; ground terminals can be left unconnected, but this increases the noise level. To reduce the noise level, connect these clips to the common ground wire. Please note that this ground connection will not help correctly measure the actual signal because it&#8217;s a differential line and not referenced to the common wire.<\/p>\n<p>Let&#8217;s repeat sending the &#8216;h&#8217; symbol using echo. We should capture something like this:<\/p>\n<p><a href=\"http:\/\/olegkutkov.me\/wp-content\/uploads\/2019\/11\/diff_tx_start.png\"><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter size-full wp-image-1008\" src=\"http:\/\/olegkutkov.me\/wp-content\/uploads\/2019\/11\/diff_tx_start.png\" alt=\"\" width=\"642\" height=\"451\" srcset=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2019\/11\/diff_tx_start.png 642w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2019\/11\/diff_tx_start-300x211.png 300w\" sizes=\"(max-width: 642px) 100vw, 642px\" \/><\/a><\/p>\n<p>As expected, there are two signals. One of the signals is inverted. But the overall picture looks familiar to the previous measures on the FT232 TX pin. Here even can be measured baud rate. Of course, both signals are quite noisy.<\/p>\n<p>Most of the oscilloscopes contain simple Math functions. Using this functionality, the second channel can be subtracted from the first channel.<br \/>\nThe subtraction result must be inverted. After this result should look more correct. The noise level was decreased.<\/p>\n<p><a href=\"http:\/\/olegkutkov.me\/wp-content\/uploads\/2019\/11\/rs485_signal_math.png\"><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter size-full wp-image-1010\" src=\"http:\/\/olegkutkov.me\/wp-content\/uploads\/2019\/11\/rs485_signal_math.png\" alt=\"\" width=\"650\" height=\"475\" srcset=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2019\/11\/rs485_signal_math.png 650w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2019\/11\/rs485_signal_math-300x219.png 300w\" sizes=\"(max-width: 650px) 100vw, 650px\" \/><\/a><\/p>\n<p>Data can be easily decoded.<br \/>\nActually, I&#8217;m not sure about this &#8216;bit&#8217; between idle state and transmission of the start bit. It looks like the transmitter is switching from the high-z state to the tx mode. The area was marked on the picture. If I&#8217;m wrong, please correct me down in the comments.<\/p>\n<p><a href=\"http:\/\/olegkutkov.me\/wp-content\/uploads\/2019\/11\/rs-485-signal_math_and_decode.png\"><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter size-full wp-image-1011\" src=\"http:\/\/olegkutkov.me\/wp-content\/uploads\/2019\/11\/rs-485-signal_math_and_decode.png\" alt=\"\" width=\"650\" height=\"475\" srcset=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2019\/11\/rs-485-signal_math_and_decode.png 650w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2019\/11\/rs-485-signal_math_and_decode-300x219.png 300w\" sizes=\"(max-width: 650px) 100vw, 650px\" \/><\/a><\/p>\n<p>You can get more information about RS-485 and wiring <a href=\"https:\/\/www.maximintegrated.com\/en\/design\/technical-documents\/tutorials\/7\/763.html\">here<\/a>.<\/p>\n<p>Now it&#8217;s time to have some fun. How about &#8216;movie&#8217; through the RS-485 line?<\/p>\n<p>Of course not a real movie but a very cool ASCII-Art version of Star Wars.<\/p>\n<p>Let&#8217;s test the &#8216;movie&#8217;. Connect to the special server using telnet:<\/p>\n<pre>telnet towel.blinkenlights.nl<\/pre>\n<p>If everything is correct, you should see the &#8216;movie&#8217; in ASCII. To exit, type Ctrl-] and then Ctrl-d<\/p>\n<p>Due to the nature of this &#8216;movie&#8217;, we can transfer this stream using any serial line. In our case, it&#8217;s RS-485.<\/p>\n<p>Connect two adapters and connect USB to the same (or even different) computers. One terminal will be the server, and the other is the client.<\/p>\n<p><a href=\"http:\/\/olegkutkov.me\/wp-content\/uploads\/2019\/11\/rs485_adapters_test.jpg\"><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter size-large wp-image-1013\" src=\"http:\/\/olegkutkov.me\/wp-content\/uploads\/2019\/11\/rs485_adapters_test-1024x768.jpg\" alt=\"\" width=\"708\" height=\"531\" srcset=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2019\/11\/rs485_adapters_test-1024x768.jpg 1024w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2019\/11\/rs485_adapters_test-300x225.jpg 300w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2019\/11\/rs485_adapters_test-768x576.jpg 768w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2019\/11\/rs485_adapters_test.jpg 2000w\" sizes=\"(max-width: 708px) 100vw, 708px\" \/><\/a><\/p>\n<p>For the client, we need some terminal program that can work with a serial line. The most popular utility for the console mode is minicom. Install minicom if you don&#8217;t have it.<\/p>\n<p>Now on the server-side, rerun telnet but this time redirect all output to the connected adapter:<\/p>\n<pre>telnet towel.blinkenlights.nl &gt; \/dev\/ttyUSBX<\/pre>\n<p>Replace X with your device number.<\/p>\n<p>On the client-side, run minicom for the adapter device:<\/p>\n<pre>minicom -D \/dev\/ttyUSBX<\/pre>\n<p>Enjoy the ASCII movie on speed 9600 via RS-485 line \ud83d\ude42<\/p>\n<p>How it looks like on video:<\/p>\n<p><iframe loading=\"lazy\" title=\"Fun with RS-485 adapters\" width=\"850\" height=\"478\" src=\"https:\/\/www.youtube.com\/embed\/5T_9HntDRwU?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen><\/iframe><\/p>\n<p>Thanks for reading!<\/p>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n","protected":false},"excerpt":{"rendered":"<p>I just built two RS-485 adapters (version 2) and decided to write a little note about the RS-485 bus (and differential line) theory, plus perform some testing of the devices. This material mostly interesting for newbies. At the end of this article, you can find a funny way to test these devices \ud83d\ude42<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"footnotes":""},"categories":[30,78,54],"tags":[81,51,80,50,82],"_links":{"self":[{"href":"https:\/\/olegkutkov.me\/wp-json\/wp\/v2\/posts\/987"}],"collection":[{"href":"https:\/\/olegkutkov.me\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/olegkutkov.me\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/olegkutkov.me\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/olegkutkov.me\/wp-json\/wp\/v2\/comments?post=987"}],"version-history":[{"count":22,"href":"https:\/\/olegkutkov.me\/wp-json\/wp\/v2\/posts\/987\/revisions"}],"predecessor-version":[{"id":1774,"href":"https:\/\/olegkutkov.me\/wp-json\/wp\/v2\/posts\/987\/revisions\/1774"}],"wp:attachment":[{"href":"https:\/\/olegkutkov.me\/wp-json\/wp\/v2\/media?parent=987"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/olegkutkov.me\/wp-json\/wp\/v2\/categories?post=987"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/olegkutkov.me\/wp-json\/wp\/v2\/tags?post=987"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}