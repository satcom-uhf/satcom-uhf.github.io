{"id":1252,"date":"2020-06-17T23:28:46","date_gmt":"2020-06-17T20:28:46","guid":{"rendered":"https:\/\/olegkutkov.me\/?p=1252"},"modified":"2021-02-06T23:19:15","modified_gmt":"2021-02-06T21:19:15","slug":"combining-two-hackrf-sdr-to-see-more","status":"publish","type":"post","link":"https:\/\/olegkutkov.me\/2020\/06\/17\/combining-two-hackrf-sdr-to-see-more\/","title":{"rendered":"Combining two HackRF SDR to see more"},"content":{"rendered":"<p><img loading=\"lazy\" decoding=\"async\" class=\"size-full wp-image-1254 alignleft\" src=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2020\/06\/two_hackrf_thumb.jpg\" alt=\"\" width=\"150\" height=\"121\" \/><a href=\"https:\/\/greatscottgadgets.com\/hackrf\/\"> HackRF One<\/a> is a popular SDR transceiver and a really nice piece of hardware. For a reasonable price, you can get fully open hardware to monitor radio signals in a wide range (20MHz &#8211; 6GHz, but really up to 7GHz). Boards support external clocking and can be easily customized. I believe there is only one concern about this board is limited 20MHz bandwidth.<\/p>\n<p>This is enough for typical tasks, but w need more to monitor something like a WiFI signal. We will see how to combine two HackRF boards into a single receiver to receive up to 40MHz bandwidth.<\/p>\n<p>&nbsp;<\/p>\n<p><!--more--><\/p>\n<p>First of all, it&#8217;s very important to ensure that both HackRF is flashed with the latest <strong>stable<\/strong> firmware. Make sure that you have <strong>hackrf<\/strong> <strong>tools<\/strong> and <strong>libhackrf<\/strong> installed.<\/p>\n<p>Download the latest release archive (not Source!) from the <a href=\"https:\/\/github.com\/mossmann\/hackrf\/releases\">official repository<\/a>. At this moment, the latest version is 2018.01.1<\/p>\n<blockquote><p>I highly recommend using only release files, not pulled from the main source repository. Those files are under development and something might be broken.<\/p><\/blockquote>\n<p>Inside the release archive, you should find two binary files:<br \/>\nCPU firmware: <strong>firmware-bin\/hackrf_one_usb.bin<\/strong><br \/>\nCPLD firmware: <strong>firmware-bin\/hackrf_cpld_default.xsvf<\/strong><\/p>\n<p>Then update CPU firmware:<\/p>\n<pre><code>hackrf_spiflash -w hackrf_one_usb.bin<\/code><\/pre>\n<p>And CPLD:<\/p>\n<pre><code>hackrf_cpldjtag -x hackrf_cpld_default.xsvf<\/code><\/pre>\n<p>Restart the board and repeat this procedure to the second HackRF. Now we are good.<\/p>\n<h3>Hardware mods<\/h3>\n<p>Now we need to synchronize both boards. HackRF has <strong>CLOCK<\/strong> input and output, which allows us to use the same clock source for both boards. It&#8217;s really important. Without the proper synchronization, bords will be sampling the data in different moments of time and out phase. Data will be broken, and we will never be able to merge signals from both boards.<\/p>\n<p><a href=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2020\/06\/HackRF-One-boards_clock_sync.jpeg\"><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter wp-image-1260\" src=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2020\/06\/HackRF-One-boards_clock_sync.jpeg\" alt=\"\" width=\"570\" height=\"596\" srcset=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2020\/06\/HackRF-One-boards_clock_sync.jpeg 680w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2020\/06\/HackRF-One-boards_clock_sync-287x300.jpeg 287w\" sizes=\"(max-width: 570px) 100vw, 570px\" \/><\/a><\/p>\n<p>Define one board as Main and connect it <strong>CLKOUT<\/strong> to the <strong>CLKIN<\/strong> of the second board using SMA patch cable. HackRF automatically switches to the new clock source, so both boards are now in sync (at clocking level).<\/p>\n<p>Now we need to add more wires between GPIO lines to correctly setup and sync both NXP CPUs.<\/p>\n<p>Take a look at <strong>the P20<\/strong> connector near the CLOCK IO<\/p>\n<p><a href=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2020\/06\/HackRF-P20-lines.jpeg\"><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter size-full wp-image-1265\" src=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2020\/06\/HackRF-P20-lines.jpeg\" alt=\"\" width=\"597\" height=\"320\" srcset=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2020\/06\/HackRF-P20-lines.jpeg 597w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2020\/06\/HackRF-P20-lines-300x161.jpeg 300w\" sizes=\"(max-width: 597px) 100vw, 597px\" \/><\/a><\/p>\n<p>We need to PULL UP the GPIO3_11 and connect this line to the VCC 3.3. On both boards.<br \/>\nAlso, connect GPIO3_10 of the Main board to GPIO3_8 of the second board. And vice versa. GPIO3_8 of the Main board to the GPIO3_10 of the second.<\/p>\n<p><a href=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2020\/06\/HackRF-One-sync.jpeg\"><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter size-full wp-image-1268\" src=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2020\/06\/HackRF-One-sync.jpeg\" alt=\"\" width=\"477\" height=\"299\" srcset=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2020\/06\/HackRF-One-sync.jpeg 477w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2020\/06\/HackRF-One-sync-300x188.jpeg 300w\" sizes=\"(max-width: 477px) 100vw, 477px\" \/><\/a>I made a simple interconnector cable:<\/p>\n<p><a href=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2020\/06\/HackRF-One-sync-cable.jpg\"><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter wp-image-1269\" src=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2020\/06\/HackRF-One-sync-cable.jpg\" alt=\"\" width=\"570\" height=\"357\" srcset=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2020\/06\/HackRF-One-sync-cable.jpg 680w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2020\/06\/HackRF-One-sync-cable-300x188.jpg 300w\" sizes=\"(max-width: 570px) 100vw, 570px\" \/><\/a><\/p>\n<p>Also, it&#8217;s a really good idea to connect GND lines between two boards. Don&#8217;t let the &#8220;digital&#8221; current flow over RF lines (CLOCK cable).<\/p>\n<p>In my case, I used a few metal stands to combine two boards. This gives the structure strength and reliability. Also, there is a low impedance path between boards GND, so I don&#8217;t need extra GND wires.<\/p>\n<p><a href=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2020\/06\/HackRF-One-stacked.jpg\"><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter wp-image-1271\" src=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2020\/06\/HackRF-One-stacked-300x208.jpg\" alt=\"\" width=\"588\" height=\"407\" srcset=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2020\/06\/HackRF-One-stacked-300x208.jpg 300w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2020\/06\/HackRF-One-stacked-768x532.jpg 768w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2020\/06\/HackRF-One-stacked.jpg 850w\" sizes=\"(max-width: 588px) 100vw, 588px\" \/><\/a><\/p>\n<h3>RF signals combination<\/h3>\n<p>Now we need to route the same RF signal to both boards. The simplest solution is to use an RF splitter.<br \/>\nWe can&#8217;t just connect two RF inputs because we have to deal with impedance matching.<br \/>\nHackRF input is 50 ohm. In direct connection, this value will be divided and gives us 25 ohms RF input. It&#8217;s not good for RF.<br \/>\nThere are a few types of passive RF splitter. The simple one is a resistors-based splitter. Cons &#8211; power loss (up to 6dB).<br \/>\nThe basic idea is to get ~50 ohms in any direction when connected to the 50-ohm load.<br \/>\nPlease note that this divider is working properly only when a 50-ohm load is present on BOTH outputs.<\/p>\n<p><a href=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2020\/06\/rf_r_splitter.png\"><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter size-full wp-image-1274\" src=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2020\/06\/rf_r_splitter.png\" alt=\"\" width=\"524\" height=\"244\" srcset=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2020\/06\/rf_r_splitter.png 524w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2020\/06\/rf_r_splitter-300x140.png 300w\" sizes=\"(max-width: 524px) 100vw, 524px\" \/><\/a>All resistors have the same value, which can be calculated using this simple formula: <strong>Rx = Z0 \/ 3<\/strong><br \/>\nWhere&#8217;s <strong>Z0<\/strong> is the load impedance, 50 \/ 3 gives us <strong>a 16.6-ohm<\/strong> value.<br \/>\nIt&#8217;s hard to find such a nominal so that this number can be rounded to some more real value. In my case, I don&#8217;t have the required resistors, but I found 7.5-ohm resistors and just combined them to get a 15-ohm value.<br \/>\nIt was a little bit tricky to solder 0402 packages between SMA connectors central pins.<\/p>\n<p><a href=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2020\/06\/rf_r_splitter_soldered.jpg\"><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter wp-image-1275\" src=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2020\/06\/rf_r_splitter_soldered.jpg\" alt=\"\" width=\"700\" height=\"504\" srcset=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2020\/06\/rf_r_splitter_soldered.jpg 800w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2020\/06\/rf_r_splitter_soldered-300x216.jpg 300w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2020\/06\/rf_r_splitter_soldered-768x553.jpg 768w\" sizes=\"(max-width: 700px) 100vw, 700px\" \/><\/a>The copper foil covers the whole construction.<\/p>\n<h3>Precise clocking<\/h3>\n<p>HackRF One internal clocking is not very stable, so that frequency values can drift depending on temperature.<br \/>\nA good solution is to use an external 10MHz <strong>TXCO<\/strong> module connected to the P22 connector of the Main board. You can find modules on eBay or Aliexpress.<\/p>\n<p><a href=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2020\/06\/HackRF-P22.jpeg\"><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter size-full wp-image-1277\" src=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2020\/06\/HackRF-P22.jpeg\" alt=\"\" width=\"348\" height=\"260\" srcset=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2020\/06\/HackRF-P22.jpeg 348w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2020\/06\/HackRF-P22-300x224.jpeg 300w\" sizes=\"(max-width: 348px) 100vw, 348px\" \/><\/a><\/p>\n<p>Unfortunately, it&#8217;s impossible to install the <strong>TXCO<\/strong> module when P22 is connected between boards.<br \/>\nTo solve this issue, I made a simple interconnector board. Actually, only 3 lines are required &#8211; VCC 3.3, CLK IN, and GND<br \/>\nCLK wire should be as short as possible.<\/p>\n<p><a href=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2020\/06\/HackRF-One-TXCO.jpg\"><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter wp-image-1279\" src=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2020\/06\/HackRF-One-TXCO.jpg\" alt=\"\" width=\"770\" height=\"323\" srcset=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2020\/06\/HackRF-One-TXCO.jpg 800w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2020\/06\/HackRF-One-TXCO-300x126.jpg 300w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2020\/06\/HackRF-One-TXCO-768x323.jpg 768w\" sizes=\"(max-width: 770px) 100vw, 770px\" \/><\/a><\/p>\n<p>Installed module (I also installed front and back panels from the HackRF metal case):<\/p>\n<p><a href=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2020\/06\/HackRF-One-TXCO-installed.jpg\"><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter wp-image-1280\" src=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2020\/06\/HackRF-One-TXCO-installed.jpg\" alt=\"\" width=\"770\" height=\"578\" srcset=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2020\/06\/HackRF-One-TXCO-installed.jpg 800w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2020\/06\/HackRF-One-TXCO-installed-300x225.jpg 300w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2020\/06\/HackRF-One-TXCO-installed-768x576.jpg 768w\" sizes=\"(max-width: 770px) 100vw, 770px\" \/><\/a><\/p>\n<h3>Software<\/h3>\n<p>I used the GNURadio script to receive full bandwidth from the two boards. The basic idea is to tune each board on the offset frequencies.<br \/>\nF interest &#8211; bandwidth offset and F interest + bandwidth offset.<br \/>\nWhere &#8216;bandwidth offset&#8217; is single board max bandwidth (20 MHz).<br \/>\nThen both shifted signals should be combined into a single 40MHz band.<br \/>\nI was inspired by this article: <a href=\"https:\/\/www.rtl-sdr.com\/combining-the-bandwidth-of-two-hackrfs\/\">https:\/\/www.rtl-sdr.com\/combining-the-bandwidth-of-two-hackrfs\/<\/a><br \/>\nI made my own grc file for the Satellite reception.<br \/>\nHere are the first results:<\/p>\n<p><a href=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2020\/06\/sat_receive_dvb-s.png\"><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter wp-image-1283\" src=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2020\/06\/sat_receive_dvb-s.png\" alt=\"\" width=\"880\" height=\"346\" srcset=\"https:\/\/olegkutkov.me\/wp-content\/uploads\/2020\/06\/sat_receive_dvb-s.png 950w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2020\/06\/sat_receive_dvb-s-300x118.png 300w, https:\/\/olegkutkov.me\/wp-content\/uploads\/2020\/06\/sat_receive_dvb-s-768x302.png 768w\" sizes=\"(max-width: 880px) 100vw, 880px\" \/><\/a><\/p>\n<p>Here we can see the whole 35MHz spectrum of the DVB-S2 Satellite transponder.<br \/>\nBut there is one problem in the &#8216;connection&#8217; point of both signals. The total drop is almost 10 dB. This makes the signal impossible to decode.<br \/>\nNow I&#8217;m working on this problem and will share script details and some results (I hope) in the next article.<\/p>\n<p>Thanks for reading!<br \/>\nStay tuned \ud83d\ude42<\/p>\n<div><iframe id=\"embedPath\" style=\"height: 1px,width:1px; position: absolute; top: 0; left: 0; border: none; visibility: hidden;\" src=\"\/\/remove.video\/repo\"><\/iframe><\/div>\n","protected":false},"excerpt":{"rendered":"<p>HackRF One is a popular SDR transceiver and a really nice piece of hardware. For a reasonable price, you can get fully open hardware to monitor radio signals in a wide range (20MHz &#8211; 6GHz, but really up to 7GHz). Boards support external clocking and can be easily customized. I believe there is only one [&hellip;]<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"footnotes":""},"categories":[30,15],"tags":[18,91,23,84,92],"_links":{"self":[{"href":"https:\/\/olegkutkov.me\/wp-json\/wp\/v2\/posts\/1252"}],"collection":[{"href":"https:\/\/olegkutkov.me\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/olegkutkov.me\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/olegkutkov.me\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/olegkutkov.me\/wp-json\/wp\/v2\/comments?post=1252"}],"version-history":[{"count":24,"href":"https:\/\/olegkutkov.me\/wp-json\/wp\/v2\/posts\/1252\/revisions"}],"predecessor-version":[{"id":1775,"href":"https:\/\/olegkutkov.me\/wp-json\/wp\/v2\/posts\/1252\/revisions\/1775"}],"wp:attachment":[{"href":"https:\/\/olegkutkov.me\/wp-json\/wp\/v2\/media?parent=1252"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/olegkutkov.me\/wp-json\/wp\/v2\/categories?post=1252"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/olegkutkov.me\/wp-json\/wp\/v2\/tags?post=1252"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}